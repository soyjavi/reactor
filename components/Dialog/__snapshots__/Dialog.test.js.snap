// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Dialog> hook:styler 1`] = `
<View
  pointerEvents="none"
  style={
    Object {
      "height": "100%",
      "left": 0,
      "maxHeight": "100%",
      "opacity": 0,
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    style={
      Array [
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "backgroundColor": "rgba(0,0,0,0.8)",
          "flex": 1,
          "justifyContent": "center",
        },
        undefined,
        undefined,
      ]
    }
  >
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "maxHeight": "100%",
            "position": "absolute",
            "width": "100%",
          },
          Object {
            "paddingBottom": 0,
          },
        ]
      }
    >
      <View
        pointerEvents="auto"
        style={
          Object {
            "transform": Array [
              Object {
                "translateY": 1334,
              },
            ],
          }
        }
      >
        <View
          onMoveShouldSetResponder={[Function]}
          onMoveShouldSetResponderCapture={[Function]}
          onResponderEnd={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderReject={[Function]}
          onResponderRelease={[Function]}
          onResponderStart={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          onStartShouldSetResponderCapture={[Function]}
          style={
            Array [
              Object {
                "backgroundColor": "#ffffff",
                "padding": 24,
              },
              Object {
                "marginBottom": 16,
              },
              undefined,
            ]
          }
        />
      </View>
    </View>
  </RCTSafeAreaView>
</View>
`;

exports[`<Dialog> renders 1`] = `
<View
  pointerEvents="none"
  style={
    Object {
      "height": "100%",
      "left": 0,
      "maxHeight": "100%",
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    style={
      Array [
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "backgroundColor": "rgba(0,0,0,0.8)",
          "flex": 1,
          "justifyContent": "center",
        },
        undefined,
        undefined,
      ]
    }
  >
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "maxHeight": "100%",
            "position": "absolute",
            "width": "100%",
          },
          Object {
            "paddingBottom": 0,
          },
        ]
      }
    >
      <View
        pointerEvents="auto"
        style={Object {}}
      >
        <View
          onMoveShouldSetResponder={[Function]}
          onMoveShouldSetResponderCapture={[Function]}
          onResponderEnd={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderReject={[Function]}
          onResponderRelease={[Function]}
          onResponderStart={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          onStartShouldSetResponderCapture={[Function]}
          style={
            Array [
              Object {
                "backgroundColor": "#ffffff",
                "padding": 24,
              },
              undefined,
            ]
          }
        />
      </View>
    </View>
  </RCTSafeAreaView>
</View>
`;

exports[`<Dialog> when {children} 1`] = `
<View
  pointerEvents="none"
  style={
    Object {
      "height": "100%",
      "left": 0,
      "maxHeight": "100%",
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    style={
      Array [
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "backgroundColor": "rgba(0,0,0,0.8)",
          "flex": 1,
          "justifyContent": "center",
        },
        undefined,
        undefined,
      ]
    }
  >
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "maxHeight": "100%",
            "position": "absolute",
            "width": "100%",
          },
          Object {
            "paddingBottom": 0,
          },
        ]
      }
    >
      <View
        pointerEvents="auto"
        style={Object {}}
      >
        <View
          onMoveShouldSetResponder={[Function]}
          onMoveShouldSetResponderCapture={[Function]}
          onResponderEnd={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderReject={[Function]}
          onResponderRelease={[Function]}
          onResponderStart={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          onStartShouldSetResponderCapture={[Function]}
          style={
            Array [
              Object {
                "backgroundColor": "#ffffff",
                "padding": 24,
              },
              undefined,
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#191919",
                  "fontFamily": undefined,
                  "textAlignVertical": "center",
                },
                Object {
                  "fontSize": 16,
                  "lineHeight": 24,
                },
                undefined,
                undefined,
                undefined,
                undefined,
              ]
            }
          >
            lorem ipsum...
          </Text>
        </View>
      </View>
    </View>
  </RCTSafeAreaView>
</View>
`;

exports[`<Dialog> when {highlight} 1`] = `
<View
  pointerEvents="none"
  style={
    Object {
      "height": "100%",
      "left": 0,
      "maxHeight": "100%",
      "opacity": 0,
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    style={
      Array [
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "backgroundColor": "rgba(0,0,0,0.8)",
          "flex": 1,
          "justifyContent": "center",
        },
        undefined,
        undefined,
      ]
    }
  >
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "maxHeight": "100%",
            "position": "absolute",
            "width": "100%",
          },
          Object {
            "paddingBottom": 0,
          },
        ]
      }
    >
      <View
        pointerEvents="auto"
        style={
          Object {
            "transform": Array [
              Object {
                "translateY": 1334,
              },
            ],
          }
        }
      >
        <View
          onMoveShouldSetResponder={[Function]}
          onMoveShouldSetResponderCapture={[Function]}
          onResponderEnd={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderReject={[Function]}
          onResponderRelease={[Function]}
          onResponderStart={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          onStartShouldSetResponderCapture={[Function]}
          style={
            Array [
              Object {
                "backgroundColor": "#ffffff",
                "padding": 24,
              },
              undefined,
            ]
          }
        />
      </View>
    </View>
  </RCTSafeAreaView>
</View>
`;

exports[`<Dialog> when {onClose} 1`] = `
<View
  pointerEvents="none"
  style={
    Object {
      "height": "100%",
      "left": 0,
      "maxHeight": "100%",
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    style={
      Array [
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "backgroundColor": "rgba(0,0,0,0.8)",
          "flex": 1,
          "justifyContent": "center",
        },
        undefined,
        undefined,
      ]
    }
  >
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "maxHeight": "100%",
            "position": "absolute",
            "width": "100%",
          },
          Object {
            "paddingBottom": 0,
          },
        ]
      }
    >
      <View
        pointerEvents="auto"
        style={Object {}}
      >
        <View
          onMoveShouldSetResponder={[Function]}
          onMoveShouldSetResponderCapture={[Function]}
          onResponderEnd={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderReject={[Function]}
          onResponderRelease={[Function]}
          onResponderStart={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          onStartShouldSetResponderCapture={[Function]}
          style={
            Array [
              Object {
                "backgroundColor": "#ffffff",
                "padding": 24,
              },
              undefined,
            ]
          }
        >
          <View
            accessible={true}
            focusable={true}
            onClick={[Function]}
            onLayout={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            pointerEvents="box-only"
            style={
              Array [
                undefined,
                Array [
                  Object {
                    "alignContent": "center",
                    "alignItems": "center",
                    "alignSelf": "flex-start",
                    "justifyContent": "center",
                    "width": "auto",
                  },
                  undefined,
                  Object {
                    "height": 32,
                    "paddingHorizontal": 8,
                  },
                  undefined,
                  Object {
                    "backgroundColor": "transparent",
                    "borderRadius": 0,
                  },
                  Object {
                    "position": "absolute",
                    "right": 8,
                    "top": 8,
                    "zIndex": 1,
                  },
                ],
                Array [
                  Object {
                    "alignContent": "center",
                    "alignItems": "center",
                    "alignSelf": "flex-start",
                    "justifyContent": "center",
                    "width": "auto",
                  },
                  undefined,
                  Object {
                    "height": 32,
                    "paddingHorizontal": 8,
                  },
                  undefined,
                  Object {
                    "backgroundColor": "transparent",
                    "borderRadius": 0,
                  },
                  Object {
                    "position": "absolute",
                    "right": 8,
                    "top": 8,
                    "zIndex": 1,
                  },
                ],
              ]
            }
          >
            <View
              style={
                Array [
                  Object {
                    "display": "flex",
                    "flexDirection": "row",
                    "height": "auto",
                    "width": "100%",
                  },
                  Object {
                    "alignItems": "center",
                  },
                  Object {
                    "justifyContent": "center",
                  },
                  Object {
                    "width": "auto",
                  },
                  undefined,
                ]
              }
            >
              <Text />
            </View>
            <View
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderRadius": 0,
                    "bottom": 0,
                    "left": 0,
                    "overflow": "hidden",
                    "position": "absolute",
                    "right": 0,
                    "top": 0,
                  },
                  0,
                ]
              }
            >
              <View
                style={
                  Object {
                    "backgroundColor": "#191919",
                    "height": 0,
                    "opacity": 0,
                    "width": 0,
                    "zIndex": 0,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
    </View>
  </RCTSafeAreaView>
</View>
`;

exports[`<Dialog> when {position} 1`] = `
<View
  pointerEvents="none"
  style={
    Object {
      "height": "100%",
      "left": 0,
      "maxHeight": "100%",
      "opacity": 0,
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    style={
      Array [
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "backgroundColor": "rgba(0,0,0,0.8)",
          "flex": 1,
          "justifyContent": "center",
        },
        Object {
          "justifyContent": "flex-end",
        },
        undefined,
      ]
    }
  >
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "maxHeight": "100%",
            "position": "absolute",
            "width": "100%",
          },
          Object {
            "paddingBottom": 0,
          },
        ]
      }
    >
      <View
        pointerEvents="auto"
        style={
          Object {
            "transform": Array [
              Object {
                "translateY": 1334,
              },
            ],
          }
        }
      >
        <View
          onMoveShouldSetResponder={[Function]}
          onMoveShouldSetResponderCapture={[Function]}
          onResponderEnd={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderReject={[Function]}
          onResponderRelease={[Function]}
          onResponderStart={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          onStartShouldSetResponderCapture={[Function]}
          style={
            Array [
              Object {
                "backgroundColor": "#ffffff",
                "padding": 24,
              },
              undefined,
            ]
          }
        />
      </View>
    </View>
  </RCTSafeAreaView>
</View>
`;

exports[`<Dialog> when {style} 1`] = `
<View
  pointerEvents="none"
  style={
    Object {
      "height": "100%",
      "left": 0,
      "maxHeight": "100%",
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    style={
      Array [
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "backgroundColor": "rgba(0,0,0,0.8)",
          "flex": 1,
          "justifyContent": "center",
        },
        undefined,
        Object {
          "backgroundColor": "#e85a7e",
          "height": "50%",
        },
      ]
    }
  >
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "maxHeight": "100%",
            "position": "absolute",
            "width": "100%",
          },
          Object {
            "paddingBottom": 0,
          },
        ]
      }
    >
      <View
        pointerEvents="auto"
        style={Object {}}
      >
        <View
          onMoveShouldSetResponder={[Function]}
          onMoveShouldSetResponderCapture={[Function]}
          onResponderEnd={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderReject={[Function]}
          onResponderRelease={[Function]}
          onResponderStart={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          onStartShouldSetResponderCapture={[Function]}
          style={
            Array [
              Object {
                "backgroundColor": "#ffffff",
                "padding": 24,
              },
              Object {
                "backgroundColor": "#191919",
              },
            ]
          }
        />
      </View>
    </View>
  </RCTSafeAreaView>
</View>
`;

exports[`<Dialog> when {visible} 1`] = `
<View
  pointerEvents="auto"
  style={
    Object {
      "height": "100%",
      "left": 0,
      "maxHeight": "100%",
      "opacity": 1,
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    style={
      Array [
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "backgroundColor": "rgba(0,0,0,0.8)",
          "flex": 1,
          "justifyContent": "center",
        },
        undefined,
        undefined,
      ]
    }
  >
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "maxHeight": "100%",
            "position": "absolute",
            "width": "100%",
          },
          Object {
            "paddingBottom": 0,
          },
        ]
      }
    >
      <View
        pointerEvents="auto"
        style={
          Object {
            "transform": Array [
              Object {
                "translateY": 0,
              },
            ],
          }
        }
      >
        <View
          onMoveShouldSetResponder={[Function]}
          onMoveShouldSetResponderCapture={[Function]}
          onResponderEnd={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderReject={[Function]}
          onResponderRelease={[Function]}
          onResponderStart={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          onStartShouldSetResponderCapture={[Function]}
          style={
            Array [
              Object {
                "backgroundColor": "#ffffff",
                "padding": 24,
              },
              undefined,
            ]
          }
        />
      </View>
    </View>
  </RCTSafeAreaView>
</View>
`;
